package component:dyna;

world dynamic-dispatch {
    import dynamic-component;
}
    
interface dynamic-component {
    resource engine {
        constructor();
        load-component: func(bytes: list<u8>) -> result<component, load-error>;
    }

    resource component {
        call: func(name: string, params: list<val>) -> result<list<val>, call-error>;
        reflect: func() -> list<export-item>;
    }

    record export-item {
        name: string,
        kind: export-kind,
    }

    variant export-kind {
        function(function)
    }

    record function {
        params: list<tuple<string, type-item>>,
        results: type-item
    }

    variant type-item {
        str
    }

    variant val {
        str(string)
    }

    variant load-error {
        invalid-bytes(string)
    }

    variant call-error {
        no-function
    }
}
