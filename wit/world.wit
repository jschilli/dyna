package component:dyna;

world dynamic-dispatch {
    import dynamic-component;
    import wit;
}
    
interface dynamic-component {
    use wit.{%world};

    resource engine {
        constructor();
        load-component: func(bytes: list<u8>) -> result<component, load-error>;
    }

    resource component {
        %world: func() -> result<%world, resolve-error>;
        call: func(name: string, params: list<val>) -> result<list<val>, call-error>;
    }

    variant val {
        %string(string)
    }

    variant resolve-error {
        invalid-bytes(string)
    }

    variant load-error {
        invalid-bytes(string)
    }

    variant call-error {
        no-function
    }
}

interface wit {
    resource %world {
        exports: func() -> list<%export>;
    }

    record %export {
        name: string,
        kind: export-kind,
    }

    variant export-kind {
        function(function),
        %interface(%interface)
    }

    record function {
        params: list<tuple<string, %type>>,
        %result: %type
    }

    record %interface {
        functions: list<tuple<string, function>>
    }

    resource %type {
        kind: func() -> type-kind;
    }

    variant type-kind {
        %bool, 
        %u8,
        %u16,
        %u32,
        %u64,
        %s8,
        %s16,
        %s32,
        %s64,
        %f32,
        %f64,
        %char,
        %string,
        %list(%type),
        %tuple(list<%type>),
        %option(%type),
        %result(result-type),
        %enum(enum-type),
        %variant(variant-type),
        %record(record-type),
    }

    record result-type {
        ok: option<%type>,
        err: option<%type>
    }

    record record-type {
        name: string
    }
    
    record enum-type {
        name: string
    }
    
    record variant-type {
        name: string
    }
}
